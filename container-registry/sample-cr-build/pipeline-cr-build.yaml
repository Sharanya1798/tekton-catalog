---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cr-build
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: path-to-dockerfile
      default: "."
    - name: Repository
      description: The git repo
    - name: apikey
      description: the ibmcloud api key
    - name: registry-namespace
      description: the ibmcloud registry namespace
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
    - name: cluster-name
      description: Kubernetes cluster
    - name: registry-region
      description: the ibmcloud registry region
      default: us-south
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
      default: us-south
    - name: clusterNamespace
      description: The Kubernetes cluster namespace
      default: prod
    - name: image-url
      description: image to scan
    - name: account
      description: account info
    - name: password
      description: password of the account
    - name: app-name
      description: Logical application name for DevOps Insights
    - name: resourcegroup
      description: toolchain resource group
    - name: toolchain-id
      description: |
        Toolchain service instance id.
        Default to the toolchain containing the CD Tekton PipelineRun currently executed
    - name: pipeline-debug
      default: "0"
    - name: apikeyscan
      description: doi plugin
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
    - name: build-args
      description: ibmcloud cr build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: keep-ingress-custom-domain
      description: force keep of ingress custom domain in deployment-file if any (true|false)
      default: "false"
    - name: pr-url
      description: pr url
    - name: commit-timestamp
    - name: scm-type
    - name: project-id
      default: ""
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: commons-hosted-region
      default: "https://raw.githubusercontent.com/open-toolchain/commons/master"
    - name: path-to-context
      description: the path to the context that is used for the build (default to `.` meaning current directory)
      default: .
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "false"
    - name: dockerfile
      default: "Dockerfile"
    



   
   

  resources:
    - name: app-image
      type: image
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: extract-repository-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: >-
            . as $toolchain | ["$(params.repository)"] | if .[0]=="" then
            $toolchain | .services[] | select(.toolchain_binding.name=="repo")
            | .dashboard_url else .[0] end
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: task-1-git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: extract-doi-enablement
      taskRef:
        name: toolchain-extract-value
      params:
        # count the number of service in the toolchain that are DevopsInsights
        - name: expression
          value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: publish-buildrecord-task
      runAfter: [extract-doi-enablement]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]

      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.task-1-git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.task-1-git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.task-1-git-clone.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: apikeyscan
          value: $(params.apikeyscan)

    - name: cra-discovery-scan
      runAfter:
        - task-1-git-clone
      taskRef:
        name: cra-discovery
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: commit-id
          value: $(tasks.task-1-git-clone.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: directory-name
          value: ""
        - name: commit-timestamp
          value: $(params.commit-timestamp)
    - name: code-vulnerability-scan
      runAfter:
        - cra-discovery-scan
      taskRef:
        name: cra-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.task-1-git-clone.results.git-commit)
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id) 
    - name: cra-cis-check
      taskRef:
        name: cra-cis-check
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: secrets
          workspace: pipeline-ws
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.task-1-git-clone.results.git-commit)
        - name: directory-name
          value: ""
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    - name: cra-bom
      taskRef:
        name: cra-bom
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws          
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.task-1-git-clone.results.git-commit)
        - name: target-branch
          value: $(params.branch)
        - name: target-commit-id
          value: $(tasks.task-1-git-clone.results.git-commit)      
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    - name: docker-lint
      runAfter: [task-1-git-clone]
      taskRef:
        name: linter-docker-lint
      params:
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: fail-on-lint-errors
          value: $(params.fail-on-lint-errors)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: task-2-maven-build
      runAfter: [task-1-git-clone]
      taskRef:
        name: toolchain-build
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [docker-lint,task-2-maven-build]
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-script
          value: |
            if [ -f ./test/run-tests.sh ]; then
              source ./test/run-tests.sh
              echo -n $FILE_LOCATIONS > $(results.test-result-file-paths.path)
              echo -n $TEST_TYPES > $(results.test-types.path)
            else
              echo "Test runner script not found: ./test/run-tests.sh"
            fi
      workspaces:
        - name: artifacts
          workspace: pipeline-ws

    - name: task-3-cr-build
      runAfter: [task-2-maven-build]
      taskRef:
        name: icr-cr-build
      params:
        - name: path-to-context
          value: $(params.path-to-context)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: additional-tags
          value: "latest"
        - name: additional-tags-script
          value: |
            # Include the clone task output variables in the environment
            source /artifacts/build.properties
            # The script is providing tag(s) as output
            # But logs can be written as error stderr
            echo "Providing an image tag including git branch and commit" >&2
            # Add a specific tag with branch and commit
            echo "1.0.0-${GIT_BRANCH}-${GIT_COMMIT}"
            # Add a specific tag with cd build number
            echo "1.0.0-${BUILD_NUMBER}"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
      resources:
        outputs:
          - name: built-image
            resource: app-image

    - name: task-4-va-scan
      taskRef:
        name: icr-check-va-scan
      params:
        - name: scan-report-file1
          value: "app-image-va-report.json"
        # - name: max-iteration
        #   value: '5'
        # - name: sleep-time
        #   value: '3'
        # - name: fail-on-scanned-issues
        #   value: 'false'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      resources:
        inputs:
          - name: image
            resource: app-image
            from:
              - task-3-cr-build
    - name: publish-doi-va-scan-record
      runAfter:
        - task-4-va-scan
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: apikeyscan
          value: $(params.apikeyscan)
        - name: build-number
          value: $(tasks.publish-buildrecord-task.results.build-number)
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: $(tasks.task-4-va-scan.results.scan-report-file1)
        - name: test-types
          value: vulnerabilityadvisor
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: twistlock-scan-task
      runAfter:
        - task-4-va-scan
      taskRef:
        name: scan-task
      params:
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: registry-region
          value: $(params.registry-region)
        - name: image-url
          value: $(params.image-url)
        - name: account
          value: $(params.account)
        - name: password
          value: $(params.password)
        - name: scan-report-file
          value: app-image-scan-report.json
        - name: apikey
          value: $(params.apikey)
      resources:
        inputs:
          - name: image
            resource: app-image
            from:
              - task-3-cr-build
      workspaces:
      - name: task-pvc
        workspace: pipeline-ws  
    - name: publish-doi-twistlock-scan-record
      runAfter:
        - twistlock-scan-task
      taskRef:
        name: doi-publish-twistlock-scan-record
      params:
        - name: app-name
          value: $(params.app-name)
        - name: file-location
          value: $(tasks.twistlock-scan-task.results.scan-report-file)
        - name: registry-region
          value: $(params.registry-region)
        - name: resourcegroup
          value: $(params.resourcegroup)
        - name: toolchain-id
          value: $(params.toolchain-id)
        - name: Repository
          value: $(params.Repository)
        - name: apikeyscan
          value: $(params.apikeyscan)


      workspaces:
      - name: task-pvc
        workspace: pipeline-ws

    - name: pipeline-deploy-task
      runAfter: [twistlock-scan-task]
      taskRef:
        name: deploy-task
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: apikey
          value: $(params.apikey)
        - name: cluster
          value: $(params.cluster-name)
        - name: clusterRegion
          value: $(params.clusterRegion)
        - name: clusterNamespace
          value: $(params.clusterNamespace)
      workspaces:
      - name: task-pvc
        workspace: pipeline-ws
